[build-system]
requires = ["uv_build~=0.8.0"]
build-backend = "uv_build"

[project]
name = "openfeature-provider-unleash"
version = "0.1.0"
description = "OpenFeature provider for Unleash"
readme = "README.md"
authors = [{ name = "OpenFeature", email = "openfeature-core@groups.io" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
keywords = []
dependencies = [
  "openfeature-sdk>=0.8.2",
  "UnleashClient>=6.3.0",
]
requires-python = ">=3.9"

[project.urls]
Homepage = "https://github.com/open-feature/python-sdk-contrib"


[dependency-groups]
dev = [
  "coverage[toml]>=7.10.0,<8.0.0",
  "mypy[faster-cache]>=1.17.0,<2.0.0",
  "pytest>=8.4.0,<9.0.0",
  "pytest-asyncio>=0.23.0",
  "psycopg2-binary>=2.9.0,<3.0.0",
  "testcontainers>=4.12.0,<5.0.0",
  "types-requests>=2.31.0",
  "ruff>=0.12.10",
]

[tool.uv.build-backend]
module-name = "openfeature"
module-root = "src"
namespace = true
source-exclude = [
  # `openfeature-sdk` already includes the `py.typed` file,
  # but it is necessary for local type checking
  "openfeature/py.typed"
]

[tool.coverage.run]
omit = [
  "tests/**",
]

[tool.mypy]
mypy_path = "src"
files = "src"

python_version = "3.9" # should be identical to the minimum supported version
namespace_packages = true
explicit_package_bases = true
local_partial_types = true
pretty = true

strict = true
disallow_any_generics = false

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.ruff]
target-version = "py39"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "venv",
]

[tool.ruff.lint]
select = [
    "A",
    "B",
    "C4",
    "C90",
    "E",
    "F",
    "FLY",
    "FURB",
    "I",
    "LOG",
    "N",
    "PERF",
    "PGH",
    "PLC",
    "PLR0913",
    "PLR0915",
    "RUF",
    "S",
    "SIM",
    "T10",
    "T20",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "E501", # the formatter will handle any too long line
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*" = [
    "S101",  # Use of assert detected
    "S105",  # Possible hardcoded password
    "S106",  # Possible hardcoded password assigned to argument
    "S104",  # Possible binding to all interfaces
    "T201",  # print found
    "PERF203",  # try-except within a loop incurs performance overhead
    "PLR0915",  # Too many statements
]

[tool.ruff.lint.isort]
known-first-party = ["openfeature"]

[tool.ruff.lint.pylint]
max-args = 6
max-statements = 30

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[project.scripts]
# workaround while UV doesn't support scripts directly in the pyproject.toml
# see: https://github.com/astral-sh/uv/issues/5903
cov-report = "scripts.scripts:cov_report"
cov = "scripts.scripts:cov"
# don't name it `mypy` otherwise `uv` will override the actual binary
mypy-check = "scripts.scripts:mypy"
test = "scripts.scripts:test"
test-cov = "scripts.scripts:test_cov"
